// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 用户
model User {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  role       Int
  openid     String
  sessionKey String
  phone      String
  nickname   String @default("微信用户")
  avatarUrl  String @default("https://mmbiz.qpic.cn/mmbiz/icTdbqWNOwNRna42FI242Lcia07jQodd2FJGIYQfG0LAJGFxM4FbnQP6yfMxBgJ0F3YRqJCJ1aPAK2dQagdusBZg/0")

  shop Shop?
  // cart    Cart
  // orders  Order[]
  // Address Address[]
  // comments Comment[]

  @@unique([openid, role])
}

// 店铺
model Shop {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  name         String
  avatarUrl    String
  introduction String @default("")
  grade        Float  @default(0.0)
  latitude     Float
  longitude    Float
  address      String

  // 店铺与用户的一对一关系
  shopKeeperId Int               @unique
  shopKeeper   User              @relation(fields: [shopKeeperId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  // 店铺与商品的一对多关系
  products     Product[]
  // 店铺与分类的一对多关系
  categories   ProductCategory[]
}

// 商品
model Product {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  name        String
  imageUrl    String
  description String @default("")
  stock       Int    @default(0)
  sales       Int    @default(0)
  status      Int    @default(0)

  isExchangeable Boolean @default(false)
  exchangeLimit  Int     @default(0)
  exchangeCost   Float   @default(0.0)

  // 店铺与商品的一对多关系
  shopId         Int
  shop           Shop                   @relation(fields: [shopId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  // 商品与分类的多对多关系
  categories     ProductCategory[]      @relation("ProductsOnCategories")
  // 商品与规格的多对多关系
  specifications ProductSpecification[] @relation("ProductsOnSpecifications")
  // 商品与评论的一对多关系
  // comments       Comment[]
  // 商品与购物车列表项的一对多关系
  // cartItems      CartItem[]
  // 商品与订单列表项的一对多关系
  // orderItmes     OrderItem[]
}

// 商品分类
model ProductCategory {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  name        String
  description String @default("")
  order       Int

  // 商店与分类的一对多关系
  shopId   Int
  shop     Shop      @relation(fields: [shopId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  // 商品与分类的多对多关系
  products Product[] @relation("ProductsOnCategories")
}

// 商品规格
model ProductSpecification {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  tag   String
  name  String
  price Float

  // 商品与商品规格的多对多关系
  products Product[] @relation("ProductsOnSpecifications")
  // 商品规格与购物车列表项的一对多关系
  // cartItems  CartItem[]
  // 商品规格与订单列表项的一对多关系
  // orderItems OrderItem[]
}

// 评论
// model Comment {
//   id        Int       @id @default(autoincrement())
//   createdAt DateTime  @default(now()) 
//   updatedAt DateTime  @updatedAt 
//   deletedAt DateTime? 
//
//   content String
//
//   // 商品评论与用户的多对一关系
//   userId    Int
//   user      User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   // 商品与商品评论的一对多关系
//   productId Int
//   product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
// }

// 购物车
// model Cart {
//   id        Int       @id @default(autoincrement())
//   createdAt DateTime  @default(now()) 
//   updatedAt DateTime  @updatedAt 
//   deletedAt DateTime? 
//
//   // 用户与购物车的一对一关系
//   userId Int
//   user   User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   // 购物车与购物车列表项的一对多关系
//   items  CartItem[]
// }

// 购物车列表项
// model CartItem {
//   id        Int       @id @default(autoincrement())
//   createdAt DateTime  @default(now())
//   updatedAt DateTime  @updatedAt
//   deletedAt DateTime?
//
//   count Int
//
//   // 购物车与购物车列表项的一对多关系
//   cartId               Int
//   cart                 Cart                 @relation(fields: [cartId], references: [id])
//   //商品与购物车列表项的一对多关系
//   productId            Int
//   product              Product              @relation(fields: [productId], references: [id])
//   // 商品规格与购物车列表项的一对多关系
//   productSpecsId       Int
//   productSpecification ProductSpecification @relation(fields: [productSpecsId], references: [id])
// }

// 订单
// model Order {
//   id        Int       @id @default(autoincrement())
//   createdAt DateTime  @default(now()) 
//   updatedAt DateTime  @updatedAt 
//   deletedAt DateTime? 
//
//   status         Int
//   remarks        String
//   packingCharges Float
//   paymentMethod  Int
//   totalPrice     Float
//
//   // 用户与订单的一对多关系
//   userId    Int
//   user      User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   // 订单与订单列表项的一对多关系
//   items     OrderItem[]
//   // 订单与收货地址的多对一关系
//   addressId Int
//   address   Address     @relation(fields: [addressId], references: [id])
// }

// 订单列表项
// model OrderItem {
//   id        Int       @id @default(autoincrement())
//   createdAt DateTime  @default(now()) 
//   updatedAt DateTime  @updatedAt 
//   deletedAt DateTime? 
//
//   count Int
//
//   // 订单与订单列表项的一对多关系
//   orderId              Int
//   order                Order                @relation(fields: [orderId], references: [id])
//   // 订单列表项与商品的多对一关系
//   productId            Int
//   product              Product              @relation(fields: [productId], references: [id])
//   // 订单列表项与商品规格的多对一关系
//   productSpecsId       Int
//   productSpecification ProductSpecification @relation(fields: [productSpecsId], references: [id])
// }

// // 收获地址
// model Address {
//   id        Int       @id @default(autoincrement())
//   createdAt DateTime  @default(now()) 
//   updatedAt DateTime  @updatedAt 
//   deletedAt DateTime? 
//
//   receiverName     String
//   receiverSex      Int
//   receiverLocation String
//   receiverPhone    String
//
//   // 用户与收货地址的一对多关系
//   userId Int
//   user   User
//   // 订单与收货地址的多对一关系
//   orders Order[]
//   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
// }
